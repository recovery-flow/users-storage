/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserDataAttributesBan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDataAttributesBan{}

// UserDataAttributesBan struct for UserDataAttributesBan
type UserDataAttributesBan struct {
	// Ban status
	Status bool `json:"status"`
	// Ban start date
	Start time.Time `json:"start"`
	// Ban end date
	End time.Time `json:"end"`
	// Type of block
	Sort string `json:"sort"`
	// Reason for ban and explanation
	Desc string `json:"desc"`
	// Ban initiator id
	Initiator string `json:"initiator"`
}

type _UserDataAttributesBan UserDataAttributesBan

// NewUserDataAttributesBan instantiates a new UserDataAttributesBan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDataAttributesBan(status bool, start time.Time, end time.Time, sort string, desc string, initiator string) *UserDataAttributesBan {
	this := UserDataAttributesBan{}
	this.Status = status
	this.Start = start
	this.End = end
	this.Sort = sort
	this.Desc = desc
	this.Initiator = initiator
	return &this
}

// NewUserDataAttributesBanWithDefaults instantiates a new UserDataAttributesBan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDataAttributesBanWithDefaults() *UserDataAttributesBan {
	this := UserDataAttributesBan{}
	return &this
}

// GetStatus returns the Status field value
func (o *UserDataAttributesBan) GetStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributesBan) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UserDataAttributesBan) SetStatus(v bool) {
	o.Status = v
}

// GetStart returns the Start field value
func (o *UserDataAttributesBan) GetStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributesBan) GetStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *UserDataAttributesBan) SetStart(v time.Time) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *UserDataAttributesBan) GetEnd() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributesBan) GetEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *UserDataAttributesBan) SetEnd(v time.Time) {
	o.End = v
}

// GetSort returns the Sort field value
func (o *UserDataAttributesBan) GetSort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributesBan) GetSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sort, true
}

// SetSort sets field value
func (o *UserDataAttributesBan) SetSort(v string) {
	o.Sort = v
}

// GetDesc returns the Desc field value
func (o *UserDataAttributesBan) GetDesc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Desc
}

// GetDescOk returns a tuple with the Desc field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributesBan) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Desc, true
}

// SetDesc sets field value
func (o *UserDataAttributesBan) SetDesc(v string) {
	o.Desc = v
}

// GetInitiator returns the Initiator field value
func (o *UserDataAttributesBan) GetInitiator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributesBan) GetInitiatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initiator, true
}

// SetInitiator sets field value
func (o *UserDataAttributesBan) SetInitiator(v string) {
	o.Initiator = v
}

func (o UserDataAttributesBan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDataAttributesBan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	toSerialize["sort"] = o.Sort
	toSerialize["desc"] = o.Desc
	toSerialize["initiator"] = o.Initiator
	return toSerialize, nil
}

func (o *UserDataAttributesBan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"start",
		"end",
		"sort",
		"desc",
		"initiator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserDataAttributesBan := _UserDataAttributesBan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserDataAttributesBan)

	if err != nil {
		return err
	}

	*o = UserDataAttributesBan(varUserDataAttributesBan)

	return err
}

type NullableUserDataAttributesBan struct {
	value *UserDataAttributesBan
	isSet bool
}

func (v NullableUserDataAttributesBan) Get() *UserDataAttributesBan {
	return v.value
}

func (v *NullableUserDataAttributesBan) Set(val *UserDataAttributesBan) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDataAttributesBan) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDataAttributesBan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDataAttributesBan(val *UserDataAttributesBan) *NullableUserDataAttributesBan {
	return &NullableUserDataAttributesBan{value: val, isSet: true}
}

func (v NullableUserDataAttributesBan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDataAttributesBan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


