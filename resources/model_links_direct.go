/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LinksDirect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinksDirect{}

// LinksDirect struct for LinksDirect
type LinksDirect struct {
	Links LinksDirectLinks `json:"links"`
	Data *LinksDirectData `json:"data,omitempty"`
}

type _LinksDirect LinksDirect

// NewLinksDirect instantiates a new LinksDirect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinksDirect(links LinksDirectLinks) *LinksDirect {
	this := LinksDirect{}
	this.Links = links
	return &this
}

// NewLinksDirectWithDefaults instantiates a new LinksDirect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinksDirectWithDefaults() *LinksDirect {
	this := LinksDirect{}
	return &this
}

// GetLinks returns the Links field value
func (o *LinksDirect) GetLinks() LinksDirectLinks {
	if o == nil {
		var ret LinksDirectLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *LinksDirect) GetLinksOk() (*LinksDirectLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *LinksDirect) SetLinks(v LinksDirectLinks) {
	o.Links = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *LinksDirect) GetData() LinksDirectData {
	if o == nil || IsNil(o.Data) {
		var ret LinksDirectData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksDirect) GetDataOk() (*LinksDirectData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *LinksDirect) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given LinksDirectData and assigns it to the Data field.
func (o *LinksDirect) SetData(v LinksDirectData) {
	o.Data = &v
}

func (o LinksDirect) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinksDirect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["links"] = o.Links
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *LinksDirect) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinksDirect := _LinksDirect{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLinksDirect)

	if err != nil {
		return err
	}

	*o = LinksDirect(varLinksDirect)

	return err
}

type NullableLinksDirect struct {
	value *LinksDirect
	isSet bool
}

func (v NullableLinksDirect) Get() *LinksDirect {
	return v.value
}

func (v *NullableLinksDirect) Set(val *LinksDirect) {
	v.value = val
	v.isSet = true
}

func (v NullableLinksDirect) IsSet() bool {
	return v.isSet
}

func (v *NullableLinksDirect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinksDirect(val *LinksDirect) *NullableLinksDirect {
	return &NullableLinksDirect{value: val, isSet: true}
}

func (v NullableLinksDirect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinksDirect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


