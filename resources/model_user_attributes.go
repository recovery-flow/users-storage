/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAttributes{}

// UserAttributes struct for UserAttributes
type UserAttributes struct {
	// Username
	Username string `json:"username"`
	// Role
	Role string `json:"role"`
	// Type
	Type *string `json:"type,omitempty"`
	// Avatar
	Avatar *string `json:"avatar,omitempty"`
	// Title
	TitleName *string `json:"title_name,omitempty"`
	// Verified
	Verified bool `json:"verified"`
	// Speciality
	Speciality *string `json:"speciality,omitempty"`
	// Position
	Position *string `json:"position,omitempty"`
	// City
	City *string `json:"city,omitempty"`
	// Country
	Country *string `json:"country,omitempty"`
	// Date of birthday (YYYY-MM-DD)
	DateOfBirth *time.Time `json:"date_of_birth,omitempty"`
	// Updated at
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Created at
	CreatedAt time.Time `json:"created_at"`
}

type _UserAttributes UserAttributes

// NewUserAttributes instantiates a new UserAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAttributes(username string, role string, verified bool, createdAt time.Time) *UserAttributes {
	this := UserAttributes{}
	this.Username = username
	this.Role = role
	this.Verified = verified
	this.CreatedAt = createdAt
	return &this
}

// NewUserAttributesWithDefaults instantiates a new UserAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAttributesWithDefaults() *UserAttributes {
	this := UserAttributes{}
	return &this
}

// GetUsername returns the Username field value
func (o *UserAttributes) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserAttributes) SetUsername(v string) {
	o.Username = v
}

// GetRole returns the Role field value
func (o *UserAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *UserAttributes) SetRole(v string) {
	o.Role = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserAttributes) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserAttributes) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserAttributes) SetType(v string) {
	o.Type = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *UserAttributes) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *UserAttributes) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *UserAttributes) SetAvatar(v string) {
	o.Avatar = &v
}

// GetTitleName returns the TitleName field value if set, zero value otherwise.
func (o *UserAttributes) GetTitleName() string {
	if o == nil || IsNil(o.TitleName) {
		var ret string
		return ret
	}
	return *o.TitleName
}

// GetTitleNameOk returns a tuple with the TitleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetTitleNameOk() (*string, bool) {
	if o == nil || IsNil(o.TitleName) {
		return nil, false
	}
	return o.TitleName, true
}

// HasTitleName returns a boolean if a field has been set.
func (o *UserAttributes) HasTitleName() bool {
	if o != nil && !IsNil(o.TitleName) {
		return true
	}

	return false
}

// SetTitleName gets a reference to the given string and assigns it to the TitleName field.
func (o *UserAttributes) SetTitleName(v string) {
	o.TitleName = &v
}

// GetVerified returns the Verified field value
func (o *UserAttributes) GetVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verified, true
}

// SetVerified sets field value
func (o *UserAttributes) SetVerified(v bool) {
	o.Verified = v
}

// GetSpeciality returns the Speciality field value if set, zero value otherwise.
func (o *UserAttributes) GetSpeciality() string {
	if o == nil || IsNil(o.Speciality) {
		var ret string
		return ret
	}
	return *o.Speciality
}

// GetSpecialityOk returns a tuple with the Speciality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetSpecialityOk() (*string, bool) {
	if o == nil || IsNil(o.Speciality) {
		return nil, false
	}
	return o.Speciality, true
}

// HasSpeciality returns a boolean if a field has been set.
func (o *UserAttributes) HasSpeciality() bool {
	if o != nil && !IsNil(o.Speciality) {
		return true
	}

	return false
}

// SetSpeciality gets a reference to the given string and assigns it to the Speciality field.
func (o *UserAttributes) SetSpeciality(v string) {
	o.Speciality = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *UserAttributes) GetPosition() string {
	if o == nil || IsNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetPositionOk() (*string, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *UserAttributes) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *UserAttributes) SetPosition(v string) {
	o.Position = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UserAttributes) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UserAttributes) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *UserAttributes) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UserAttributes) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UserAttributes) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UserAttributes) SetCountry(v string) {
	o.Country = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *UserAttributes) GetDateOfBirth() time.Time {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret time.Time
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetDateOfBirthOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *UserAttributes) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given time.Time and assigns it to the DateOfBirth field.
func (o *UserAttributes) SetDateOfBirth(v time.Time) {
	o.DateOfBirth = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UserAttributes) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UserAttributes) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *UserAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o UserAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["role"] = o.Role
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.TitleName) {
		toSerialize["title_name"] = o.TitleName
	}
	toSerialize["verified"] = o.Verified
	if !IsNil(o.Speciality) {
		toSerialize["speciality"] = o.Speciality
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *UserAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"role",
		"verified",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserAttributes := _UserAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserAttributes)

	if err != nil {
		return err
	}

	*o = UserAttributes(varUserAttributes)

	return err
}

type NullableUserAttributes struct {
	value *UserAttributes
	isSet bool
}

func (v NullableUserAttributes) Get() *UserAttributes {
	return v.value
}

func (v *NullableUserAttributes) Set(val *UserAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAttributes(val *UserAttributes) *NullableUserAttributes {
	return &NullableUserAttributes{value: val, isSet: true}
}

func (v NullableUserAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


