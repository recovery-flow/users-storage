/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BanDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BanDataAttributes{}

// BanDataAttributes struct for BanDataAttributes
type BanDataAttributes struct {
	// ban period at days
	Term int32 `json:"term"`
	// type of block
	Sort string `json:"sort"`
	// reason for ban and explanation
	Desc string `json:"desc"`
}

type _BanDataAttributes BanDataAttributes

// NewBanDataAttributes instantiates a new BanDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBanDataAttributes(term int32, sort string, desc string) *BanDataAttributes {
	this := BanDataAttributes{}
	this.Term = term
	this.Sort = sort
	this.Desc = desc
	return &this
}

// NewBanDataAttributesWithDefaults instantiates a new BanDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBanDataAttributesWithDefaults() *BanDataAttributes {
	this := BanDataAttributes{}
	return &this
}

// GetTerm returns the Term field value
func (o *BanDataAttributes) GetTerm() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Term
}

// GetTermOk returns a tuple with the Term field value
// and a boolean to check if the value has been set.
func (o *BanDataAttributes) GetTermOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Term, true
}

// SetTerm sets field value
func (o *BanDataAttributes) SetTerm(v int32) {
	o.Term = v
}

// GetSort returns the Sort field value
func (o *BanDataAttributes) GetSort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value
// and a boolean to check if the value has been set.
func (o *BanDataAttributes) GetSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sort, true
}

// SetSort sets field value
func (o *BanDataAttributes) SetSort(v string) {
	o.Sort = v
}

// GetDesc returns the Desc field value
func (o *BanDataAttributes) GetDesc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Desc
}

// GetDescOk returns a tuple with the Desc field value
// and a boolean to check if the value has been set.
func (o *BanDataAttributes) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Desc, true
}

// SetDesc sets field value
func (o *BanDataAttributes) SetDesc(v string) {
	o.Desc = v
}

func (o BanDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BanDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["term"] = o.Term
	toSerialize["sort"] = o.Sort
	toSerialize["desc"] = o.Desc
	return toSerialize, nil
}

func (o *BanDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"term",
		"sort",
		"desc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBanDataAttributes := _BanDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBanDataAttributes)

	if err != nil {
		return err
	}

	*o = BanDataAttributes(varBanDataAttributes)

	return err
}

type NullableBanDataAttributes struct {
	value *BanDataAttributes
	isSet bool
}

func (v NullableBanDataAttributes) Get() *BanDataAttributes {
	return v.value
}

func (v *NullableBanDataAttributes) Set(val *BanDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableBanDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableBanDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBanDataAttributes(val *BanDataAttributes) *NullableBanDataAttributes {
	return &NullableBanDataAttributes{value: val, isSet: true}
}

func (v NullableBanDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBanDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


