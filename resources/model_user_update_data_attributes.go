/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// checks if the UserUpdateDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUpdateDataAttributes{}

// UserUpdateDataAttributes struct for UserUpdateDataAttributes
type UserUpdateDataAttributes struct {
	// Username
	Username *string `json:"username,omitempty"`
	// User role
	Role *string `json:"role,omitempty"`
	// User verified status
	Verified *bool `json:"verified,omitempty"`
	// User title name
	TitleName *string `json:"title_name,omitempty"`
	// User speciality
	Speciality *string `json:"speciality,omitempty"`
	// User position
	Position *string `json:"position,omitempty"`
	// User city
	City *string `json:"city,omitempty"`
	// User country
	Country *string `json:"country,omitempty"`
	// User date of birth
	DateOfBirth *string `json:"date_of_birth,omitempty"`
}

// NewUserUpdateDataAttributes instantiates a new UserUpdateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdateDataAttributes() *UserUpdateDataAttributes {
	this := UserUpdateDataAttributes{}
	return &this
}

// NewUserUpdateDataAttributesWithDefaults instantiates a new UserUpdateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdateDataAttributesWithDefaults() *UserUpdateDataAttributes {
	this := UserUpdateDataAttributes{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserUpdateDataAttributes) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDataAttributes) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserUpdateDataAttributes) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserUpdateDataAttributes) SetUsername(v string) {
	o.Username = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *UserUpdateDataAttributes) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDataAttributes) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *UserUpdateDataAttributes) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *UserUpdateDataAttributes) SetRole(v string) {
	o.Role = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *UserUpdateDataAttributes) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDataAttributes) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *UserUpdateDataAttributes) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *UserUpdateDataAttributes) SetVerified(v bool) {
	o.Verified = &v
}

// GetTitleName returns the TitleName field value if set, zero value otherwise.
func (o *UserUpdateDataAttributes) GetTitleName() string {
	if o == nil || IsNil(o.TitleName) {
		var ret string
		return ret
	}
	return *o.TitleName
}

// GetTitleNameOk returns a tuple with the TitleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDataAttributes) GetTitleNameOk() (*string, bool) {
	if o == nil || IsNil(o.TitleName) {
		return nil, false
	}
	return o.TitleName, true
}

// HasTitleName returns a boolean if a field has been set.
func (o *UserUpdateDataAttributes) HasTitleName() bool {
	if o != nil && !IsNil(o.TitleName) {
		return true
	}

	return false
}

// SetTitleName gets a reference to the given string and assigns it to the TitleName field.
func (o *UserUpdateDataAttributes) SetTitleName(v string) {
	o.TitleName = &v
}

// GetSpeciality returns the Speciality field value if set, zero value otherwise.
func (o *UserUpdateDataAttributes) GetSpeciality() string {
	if o == nil || IsNil(o.Speciality) {
		var ret string
		return ret
	}
	return *o.Speciality
}

// GetSpecialityOk returns a tuple with the Speciality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDataAttributes) GetSpecialityOk() (*string, bool) {
	if o == nil || IsNil(o.Speciality) {
		return nil, false
	}
	return o.Speciality, true
}

// HasSpeciality returns a boolean if a field has been set.
func (o *UserUpdateDataAttributes) HasSpeciality() bool {
	if o != nil && !IsNil(o.Speciality) {
		return true
	}

	return false
}

// SetSpeciality gets a reference to the given string and assigns it to the Speciality field.
func (o *UserUpdateDataAttributes) SetSpeciality(v string) {
	o.Speciality = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *UserUpdateDataAttributes) GetPosition() string {
	if o == nil || IsNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDataAttributes) GetPositionOk() (*string, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *UserUpdateDataAttributes) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *UserUpdateDataAttributes) SetPosition(v string) {
	o.Position = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UserUpdateDataAttributes) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDataAttributes) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UserUpdateDataAttributes) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *UserUpdateDataAttributes) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UserUpdateDataAttributes) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDataAttributes) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UserUpdateDataAttributes) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UserUpdateDataAttributes) SetCountry(v string) {
	o.Country = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *UserUpdateDataAttributes) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDataAttributes) GetDateOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *UserUpdateDataAttributes) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *UserUpdateDataAttributes) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

func (o UserUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUpdateDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	if !IsNil(o.TitleName) {
		toSerialize["title_name"] = o.TitleName
	}
	if !IsNil(o.Speciality) {
		toSerialize["speciality"] = o.Speciality
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	return toSerialize, nil
}

type NullableUserUpdateDataAttributes struct {
	value *UserUpdateDataAttributes
	isSet bool
}

func (v NullableUserUpdateDataAttributes) Get() *UserUpdateDataAttributes {
	return v.value
}

func (v *NullableUserUpdateDataAttributes) Set(val *UserUpdateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdateDataAttributes(val *UserUpdateDataAttributes) *NullableUserUpdateDataAttributes {
	return &NullableUserUpdateDataAttributes{value: val, isSet: true}
}

func (v NullableUserUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


