/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDataAttributes{}

// UserDataAttributes struct for UserDataAttributes
type UserDataAttributes struct {
	// Username
	Username string `json:"username"`
	// User description
	Description *string `json:"description,omitempty"`
	// User role
	Role string `json:"role"`
	// User avatar
	Avatar string `json:"avatar"`
	// User created at
	CreatedAt time.Time `json:"created_at"`
	// User projects
	Projects []string `json:"projects,omitempty"`
	// User ideas
	Ideas []string `json:"ideas,omitempty"`
	// User reports sent
	ReportSent []string `json:"report_sent,omitempty"`
	// User reports received
	ReportReceived []string `json:"report_received,omitempty"`
	// User ban status
	BanStatus bool `json:"ban_status"`
}

type _UserDataAttributes UserDataAttributes

// NewUserDataAttributes instantiates a new UserDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDataAttributes(username string, role string, avatar string, createdAt time.Time, banStatus bool) *UserDataAttributes {
	this := UserDataAttributes{}
	this.Username = username
	this.Role = role
	this.Avatar = avatar
	this.CreatedAt = createdAt
	this.BanStatus = banStatus
	return &this
}

// NewUserDataAttributesWithDefaults instantiates a new UserDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDataAttributesWithDefaults() *UserDataAttributes {
	this := UserDataAttributes{}
	return &this
}

// GetUsername returns the Username field value
func (o *UserDataAttributes) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserDataAttributes) SetUsername(v string) {
	o.Username = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserDataAttributes) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UserDataAttributes) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UserDataAttributes) SetDescription(v string) {
	o.Description = &v
}

// GetRole returns the Role field value
func (o *UserDataAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *UserDataAttributes) SetRole(v string) {
	o.Role = v
}

// GetAvatar returns the Avatar field value
func (o *UserDataAttributes) GetAvatar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avatar, true
}

// SetAvatar sets field value
func (o *UserDataAttributes) SetAvatar(v string) {
	o.Avatar = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserDataAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserDataAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *UserDataAttributes) GetProjects() []string {
	if o == nil || IsNil(o.Projects) {
		var ret []string
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetProjectsOk() ([]string, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *UserDataAttributes) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []string and assigns it to the Projects field.
func (o *UserDataAttributes) SetProjects(v []string) {
	o.Projects = v
}

// GetIdeas returns the Ideas field value if set, zero value otherwise.
func (o *UserDataAttributes) GetIdeas() []string {
	if o == nil || IsNil(o.Ideas) {
		var ret []string
		return ret
	}
	return o.Ideas
}

// GetIdeasOk returns a tuple with the Ideas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetIdeasOk() ([]string, bool) {
	if o == nil || IsNil(o.Ideas) {
		return nil, false
	}
	return o.Ideas, true
}

// HasIdeas returns a boolean if a field has been set.
func (o *UserDataAttributes) HasIdeas() bool {
	if o != nil && !IsNil(o.Ideas) {
		return true
	}

	return false
}

// SetIdeas gets a reference to the given []string and assigns it to the Ideas field.
func (o *UserDataAttributes) SetIdeas(v []string) {
	o.Ideas = v
}

// GetReportSent returns the ReportSent field value if set, zero value otherwise.
func (o *UserDataAttributes) GetReportSent() []string {
	if o == nil || IsNil(o.ReportSent) {
		var ret []string
		return ret
	}
	return o.ReportSent
}

// GetReportSentOk returns a tuple with the ReportSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetReportSentOk() ([]string, bool) {
	if o == nil || IsNil(o.ReportSent) {
		return nil, false
	}
	return o.ReportSent, true
}

// HasReportSent returns a boolean if a field has been set.
func (o *UserDataAttributes) HasReportSent() bool {
	if o != nil && !IsNil(o.ReportSent) {
		return true
	}

	return false
}

// SetReportSent gets a reference to the given []string and assigns it to the ReportSent field.
func (o *UserDataAttributes) SetReportSent(v []string) {
	o.ReportSent = v
}

// GetReportReceived returns the ReportReceived field value if set, zero value otherwise.
func (o *UserDataAttributes) GetReportReceived() []string {
	if o == nil || IsNil(o.ReportReceived) {
		var ret []string
		return ret
	}
	return o.ReportReceived
}

// GetReportReceivedOk returns a tuple with the ReportReceived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetReportReceivedOk() ([]string, bool) {
	if o == nil || IsNil(o.ReportReceived) {
		return nil, false
	}
	return o.ReportReceived, true
}

// HasReportReceived returns a boolean if a field has been set.
func (o *UserDataAttributes) HasReportReceived() bool {
	if o != nil && !IsNil(o.ReportReceived) {
		return true
	}

	return false
}

// SetReportReceived gets a reference to the given []string and assigns it to the ReportReceived field.
func (o *UserDataAttributes) SetReportReceived(v []string) {
	o.ReportReceived = v
}

// GetBanStatus returns the BanStatus field value
func (o *UserDataAttributes) GetBanStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BanStatus
}

// GetBanStatusOk returns a tuple with the BanStatus field value
// and a boolean to check if the value has been set.
func (o *UserDataAttributes) GetBanStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BanStatus, true
}

// SetBanStatus sets field value
func (o *UserDataAttributes) SetBanStatus(v bool) {
	o.BanStatus = v
}

func (o UserDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["role"] = o.Role
	toSerialize["avatar"] = o.Avatar
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.Ideas) {
		toSerialize["ideas"] = o.Ideas
	}
	if !IsNil(o.ReportSent) {
		toSerialize["report_sent"] = o.ReportSent
	}
	if !IsNil(o.ReportReceived) {
		toSerialize["report_received"] = o.ReportReceived
	}
	toSerialize["ban_status"] = o.BanStatus
	return toSerialize, nil
}

func (o *UserDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"role",
		"avatar",
		"created_at",
		"ban_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserDataAttributes := _UserDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserDataAttributes)

	if err != nil {
		return err
	}

	*o = UserDataAttributes(varUserDataAttributes)

	return err
}

type NullableUserDataAttributes struct {
	value *UserDataAttributes
	isSet bool
}

func (v NullableUserDataAttributes) Get() *UserDataAttributes {
	return v.value
}

func (v *NullableUserDataAttributes) Set(val *UserDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDataAttributes(val *UserDataAttributes) *NullableUserDataAttributes {
	return &NullableUserDataAttributes{value: val, isSet: true}
}

func (v NullableUserDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


